# Gaussian smearing of MC template
sigSmearingMean[0.2, -1, 2]
# Minimum sigma in principle should be 1/sqrt(12)
sigSmearingDev[0.5,0.28,3.0]
Gaussian::signalRes(mass,sigSmearingMean,sigSmearingDev)

# Bernstein polynomial background 
# Passing
a0[1]
a1[1,0,50]
a2[1,0,50]
a3[1,0,50]
RooBernstein::backgroundPass(mass, {a0,a1,a2,a3})

# Failing
b0[1]
b1[1,0,50]
b2[1,0,50]
b3[1,0,50]
RooBernstein::backgroundFail(mass, {b0,b1,b2,b3})

# RooCMSShape background parameters
# Passing
cmsShapePassAlpha[70]
cmsShapePassBeta[0.02, 0., 0.1]
cmsShapePassGamma[0.1, 0., 1.]
cmsShapePassPeak[90.]
RooCMSShape::backgroundPassCMS(mass, cmsShapePassAlpha, cmsShapePassBeta, cmsShapePassGamma, cmsShapePassPeak)

# Failing
cmsShapeFailAlpha[70]
cmsShapeFailBeta[0.02, 0., 0.1]
cmsShapeFailGamma[0.1, 0., 1.]
cmsShapeFailPeak[90.]
RooCMSShape::backgroundFailCMS(mass, cmsShapeFailAlpha, cmsShapeFailBeta, cmsShapeFailGamma, cmsShapeFailPeak)

# Main fit parameters
# Initial efficiency value can have some effect on convergence
efficiency[0.9,0,1]
# Fitter will adjust upper bounds appropriately for numSignalAll, numBackgroundPass, numBackgroundFail
numSignalAll[1., 100000.]
numBackgroundPass[0., 100000.]
numBackgroundFail[0., 100000.]

expr::numSignalPass('efficiency*numSignalAll', efficiency, numSignalAll)
expr::numSignalFail('(1-efficiency)*numSignalAll', efficiency, numSignalAll)

# non-MC template
RooCBExGaussShape::signalResPass(mass,meanP[-0.0,-5.000,5.000],sigmaP[0.956,0.00,15.000],alphaP[0.999, 0.0,50.0],nP[1.405,0.000,50.000],sigmaP_2[1.000,0.500,15.00])
RooCBExGaussShape::signalResFail(mass,meanF[-0.0,-5.000,5.000],sigmaF[3.331,0.00,15.000],alphaF[1.586, 0.0,50.0],nF[0.464,0.000,20.00], sigmaF_2[1.675,0.500,12.000])
ZGeneratorLineShape::signalPhy(mass)

FCONV::signalPass(mass, signalPhy, signalResPass)
FCONV::signalFail(mass, signalPhy, signalResFail)

SUM::pdfPass(numSignalPass*signalPass, numBackgroundPass*backgroundPass)
SUM::pdfFail(numSignalFail*signalFail, numBackgroundFail*backgroundFail)
SIMUL::simPdf(decision, Passed=signalPass, Failed=signalFail)

SUM::pdfCMSBkgPass(numSignalPass*signalPass, numBackgroundPass*backgroundPassCMS)
SUM::pdfCMSBkgFail(numSignalFail*signalFail, numBackgroundFail*backgroundFailCMS)
SIMUL::simCMSBkgPdf(decision, Passed=pdfCMSBkgPass, Failed=pdfCMSBkgFail)
